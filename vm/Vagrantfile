# -*- mode: ruby -*-
# vi: set ft=ruby :


Vagrant.configure(2) do |config|
    unless Vagrant.has_plugin?("vagrant-disksize")
        raise  Vagrant::Errors::VagrantError.new, "vagrant-disksize plugin is missing. Please install it using 'vagrant plugin install vagrant-disksize' and rerun 'vagrant up'"
      end
      unless Vagrant.has_plugin?("vagrant-reload")
        raise  Vagrant::Errors::VagrantError.new, "vagrant-reload plugin is missing. Please install it using 'vagrant plugin install vagrant-reload' and rerun 'vagrant up'"
      end

    # config.vm.box = "bento/ubuntu-22.04"
    config.vm.box = "gusztavvargadr/ubuntu-desktop-2204-lts"
    config.vm.synced_folder '.', '/vagrant'
    config.vm.hostname = "p4tc"
    config.vm.provision "file", source: "p4_16-mode.el", destination: "/home/vagrant/p4_16-mode.el"
    config.vm.provision "file", source: "p4.vim",        destination: "/home/vagrant/p4.vim"
    config.vm.provision "file", source: "config-p4tc-x86-ubuntu-22.04", destination: "/home/vagrant/config-p4tc-x86-ubuntu-22.04"
    config.vm.network "forwarded_port", guest: 5000, host: 5000   # Cobalt webUI
    config.vm.network "forwarded_port", guest: 5001, host: 5001   # Edgeshark webUI
    config.vm.network "forwarded_port", guest: 55901, host: 5901  # VNC
# for now - until we can retrieve this header from remote
    config.vm.provision "file", source: "pna.h", destination: "/home/vagrant/libs/include/"

    config.vm.define "examples", primary: true do |examples|
        examples.vm.provider "virtualbox" do |v|
            v.name = "P4TC Tutorial examples VM" + Time.now.strftime(" %Y-%m-%d")
        end
        examples.vm.provision "shell", path: "root-examples-bootstrap.sh"
        examples.vm.provision :reload
        examples.vm.provision "shell", privileged: false, path: "user-common-bootstrap.sh"
        examples.vm.provision "shell", path: "root-common-bootstrap.sh"
    end

#
   config.vm.define "release", autostart: false do |release|
       release.vm.provider "virtualbox" do |v|
           v.name = "P4TC Tutorial Release VM" + Time.now.strftime(" %Y-%m-%d")
       end
       release.vm.provision "file", source: "root-release-update.sh",        destination: "/home/vagrant/root-release-update.sh"
       release.vm.provision "shell", path: "root-release-bootstrap.sh"
       release.vm.provision :reload
       release.vm.provision "shell", privileged: false, path: "user-common-bootstrap.sh"
       release.vm.provision "shell", path: "root-common-bootstrap.sh"
   end

   config.vm.define "dev", autostart: false do |dev|
        dev.vm.provider "virtualbox" do |v|
            v.name = "P4TC Tutorial Development VM" + Time.now.strftime(" %Y-%m-%d")
            config.disksize.size = '200GB'
        end
        
        dev.vm.provision "file", source: "root-dev-update.sh",        destination: "/home/vagrant/root-dev-update.sh"
        dev.vm.provision "shell", path: "root-common-resize-disk.sh"
        dev.vm.provision "shell", path: "root-dev-bootstrap.sh"
        dev.vm.provision :reload
        dev.vm.provision "shell", privileged: false, path: "user-common-bootstrap.sh"
        dev.vm.provision "shell", path: "root-common-bootstrap.sh"
    end

    config.vm.define "devgui", autostart: false do |devgui|
        devgui.vm.provider "virtualbox" do |v|
            v.name = "P4TC Tutorial Development VM (Desktop)" + Time.now.strftime(" %Y-%m-%d")
            config.disksize.size = '200GB'
            v.gui = true
        end
        devgui.vm.provision "file", source: "root-dev-update.sh",        destination: "/home/vagrant/root-dev-update.sh"
        # devgui.vm.provision "shell", path: "root-common-resize-disk.sh" #benot-specific sdas
        devgui.vm.provision "shell", path: "root-dev-bootstrap.sh"
        devgui.vm.provision :reload
        devgui.vm.provision "shell", privileged: false, path: "user-common-bootstrap.sh"
        devgui.vm.provision "shell", path: "root-common-bootstrap.sh"
        # config.vm.network "private_network", ip: "192.168.56.101", bridge: "eno2"
        # config.vm.network "public_network", type: "dhcp", bridge: "eno1"
    end
#
    config.vm.provider "virtualbox" do |vb|
        vb.memory = 16384
        vb.cpus = 4
        vb.customize ["modifyvm", :id, "--cableconnected1", "on"]
        vb.customize ["modifyvm", :id, "--vram", "32"]
    end

end
